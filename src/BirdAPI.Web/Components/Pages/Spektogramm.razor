@page "/spectograph"
@inject HttpClient Http
@rendermode InteractiveServer
@using System.Drawing
@inject IJSRuntime JSRuntime

<PageTitle>Spectograph</PageTitle>
<h3>Spectograph</h3>
@message
<canvas @ref="canvasRef" width="800" height="600" style="border:1px solid #000000;"></canvas>
<input @bind="delenum" placeholder="which one do you want to delete" />
<button class="btn btn-primary" @onclick="deleter">Save</button>

@*Javascript --> drawing rectangle with mouse events*@
<script>
    console.log('initi');
    let canvas = null, ctx = null, isDrawing = false; let startX, startY, rectWidth, rectHeight;
    if (typeof rectangles === 'undefined') {
        console.log('initi2');
        var rectangles = [];
        console.log(rectangles);
    }
    
    function initializeCanvas(canvasRef) {
        console.log('initializeCanvas');
        canvas = canvasRef;
        ctx = canvas.getContext('2d');
        console.log('initializeCanvas2');
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
    }

    function startDrawing(e) {
        console.log('starting');
        isDrawing = true;
        startX = e.offsetX;
        startY = e.offsetY;
    }

    function draw(e) {
        console.log('drawing');
        if (!isDrawing) return;
        redrawCanvas();
        rectWidth = e.offsetX - startX;
        rectHeight = e.offsetY - startY;
        ctx.strokeRect(startX, startY, rectWidth, rectHeight);
    }

    function stopDrawing() {
        console.log('stopping');
        saveRectangled();
        console.log('stopped');
        isDrawing = false;
    }
    function saveRectangled() {
        console.log('saved');
        rectangles.push({ x: startX, y: startY, width: rectWidth, height: rectHeight });
        console.log(rectangles);
        redrawCanvas();
    }
    function redrawCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
        console.log('redrawen');
        rectangles.forEach(rect => {
            ctx.strokeRect(rect.x, rect.y, rect.width, rect.height); // Redraw each rectangle
        });
    }
    function deleter(delenum) {
        console.log('delete');
        rectangles.splice(delenum-1, 1);
        redrawCanvas();
    }
</script>

@code {
    private int? delenum;
    private ElementReference canvasRef;
    private string message = "Loading...";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        Console.WriteLine("OnAfterRenderAsync");
        try {
            if (firstRender) {
                message = "Drawing rectangle..."; StateHasChanged();
                Console.WriteLine("Drawing rectangle...");
                await JSRuntime.InvokeVoidAsync("initializeCanvas", canvasRef);
                message = "Rectangle drawn, yay!"; StateHasChanged();
                Console.WriteLine("Rectangle drawn, yay!");
            }
            
        } catch (Exception ex) {
            message = ex.Message; StateHasChanged();
        }
    }
     protected async Task deleter(){
        try{
            await JSRuntime.InvokeVoidAsync("deleter", delenum);
        }catch(Exception ex){
            message = ex.Message; StateHasChanged();
        }
    }
}